#Function definitions, dictionaries, classes, and imports________________________________________________________________________________________________________________________

import numpy as rm
import random
import math

attackerTypeVDefenderTypeXDOUBLE = {
    'Fire' : ['Grass', 'Ice', 'Bug', 'Steel'],
    'Water' : ['Fire', 'Ground', 'Rock'],
    'Electric' : ['Water', 'Flying'],
    'Grass' : ['Water', 'Ground', 'Rock'],
    'Ice' : ['Grass', 'Ground', 'Flying', 'Dragon'],\
    'Fighting' : ['Normal', 'Ice', 'Rock', 'Dark', 'Steel'],
    'Poison' : ['Grass', 'Fairy'],
    'Ground' : ['Fire', 'Electric', 'Poison', 'Rock', 'Steel'],
    'Flying' : ['Grass', 'Fighting', 'Bug'],
    'Psychic' : ['Fighting', 'Poison'],
    'Bug' : ['Grass', 'Psychic', 'Dark'],
    'Rock' : ['Fire', 'Ice', 'Flying', 'Bug'],
    'Ghost' : ['Psychic', 'Ghost'],
    'Dragon' : ['Dragon'],
    'Dark' : ['Psychic', 'Ghost'],
    'Steel' : ['Ice', 'Rock', 'Fairy'],
    'Fairy' : ['Fighting', 'Dragon', 'Dark']
}
attackerTypeVDefenderTypeXHALF = {
    'Normal' : ['Rock', 'Steel'],
    'Fire' : ['Fire', 'Water', 'Rock', 'Dragon'],
    'Water' : ['Water', 'Grass', 'Dragon'],
    'Electric' : ['Electric', 'Grass', 'Dragon'],
    'Grass' : ['Fire', 'Grass', 'Poison', 'Flying', 'Bug', 'Dragon', 'Steel'],
    'Ice' : ['Fire', 'Water', 'Ice', 'Steel'],
    'Fighting' : ['Poison', 'Flying', 'Psychic', 'Bug', 'Fairy'],
    'Poison' : ['Poison', 'Ground', 'Rock', 'Ghost'],
    'Ground' : ['Grass', 'Rock'],
    'Flying' : ['Electric', 'Rock', 'Steel'],
    'Psychic' : ['Psychic', 'Steel'],
    'Bug' : ['Fire', 'Fighting', 'Poison', 'Flying', 'Ghost', 'Steel', 'Fairy'],
    'Rock' : ['Fighting', 'Ground', 'Steel'],
    'Ghost' : ['Dark'],
    'Dragon' : ['Steel'],
    'Dark' : ['Dark', 'Fairy'],
    'Steel' : ['Fire', 'Water', 'Electric', 'Steel'],
    'Fairy' : ['Fire', 'Poison', 'Steel']
}
attackerTypeVDefenderTypeX0 = {
    'Normal' : ['Ghost'],
    'Electric' : ['Ground'],
    'Fighting' : ['Ghost'],
    'Poison' : ['Steel'],
    'Ground' : ['Flying'],
    'Psychic' : ['Dark'],
    'Ghost' : ['Normal'],
    'Dragon' : ['Fairy'],
}

class Pokemon:
    def __init__(self, name, type1, type2):
        self.name = name
        self.type1 = type1
        self.type2 = type2
class stats:
    def __init__(self, HP, attack, defense, sp_attack, sp_defense, speed):
        self.HP = HP
        self.attack = attack
        self.defense = defense
        self.sp_attack = sp_attack
        self.sp_defense = sp_defense
        self.speed = speed
class MoveInfo:
    def __init__(self, name, type, classification, power, accuracy):
        self.name = name
        self.type = type
        self.classification = classification
        self.power = power
        self.accuracy = accuracy

def nameChecker(name):

    statement = f'{name}, thats your name right? Y/N'
    print(statement)
    answer = input()
    answer = answer.upper()
    if answer != 'Y':
        print("Bruh, you're the one that spelled it. Spell it right this time!")
        name = input()
        nameChecker(name)
    return name
def inputChecker(answer):
    answer = answer.upper()
    #Make sure they have the right kind of input
    if answer != 'Y' and answer != 'N':
        print("Whoops, that's not a recognized input, lets try that again")
        answer = input()
        inputChecker(answer)
def pokemonChooser():
    choice1 = int(input())
    choice2 = int(input())
    choice3 = int(input())
    print('\n')
    return choice1, choice2, choice3
def pokemonChecker(answer, pokemonListandTypes, pokemonList):
    answer = answer.upper()
    while answer != 'Y':
        print("RIVAL: Well then pick what you want! You'll still lose, but quit waisting my time!\n")
        print(pokemonListandTypes)
        userPokemon1, userPokemon2, userPokemon3 = pokemonChooser()
        statement = f'Did you choose {pokemonList[userPokemon1 - 1]}, {pokemonList[userPokemon2 - 1]}, and {pokemonList[userPokemon3 - 1]}? Y/N'
        print(statement)
        answer = input().upper()
    return userPokemon1, userPokemon2, userPokemon3
def pokemonRecount(pokemonListandTypes, pokemonList):
    print("CREATOR: Whoops, that number didn't correlate to a pokmeon, lets try that again :D")
    print(pokemonListandTypes)
    userPokemon1, userPokemon2, userPokemon3 = pokemonChooser()
    statement = f'Did you choose {pokemonList[userPokemon1 - 1]}, {pokemonList[userPokemon2 - 1]}, and {pokemonList[userPokemon3 - 1]}?'
    print(statement)
    answer = input().upper()
    userPokemon1, userPokemon2, userPokemon3 = pokemonChecker(answer, pokemonListandTypes, pokemonList)
def damageCalculation(type, power, a, d, moveType, attackingPokemonType1, attackingPokemonType2, defendingPokemonType1, defendingPokemonType2):
    #Determine the random factor that is between .85 and 1
    random = random.sample(range(85, 100), 1)
    random = random/100

    #Determine if there is a crtical hit
    critNum = random.sample(range(1, 16), 1)
    if critNum == 14:
        critical = 1.5
    if critNum != 14:
        critical = 1
        
    #Determine the Same Type Attack Bonus (STAB)
    stab = 1
    if moveType == attackingPokemonType1 or moveType == attackingPokemonType2:
        stab = 1.5

    #Determine type effectiveness
    multiplierUp = 0
    for x in attackerTypeVDefenderTypeXDOUBLE.get(moveType):
        if x == defendingPokemonType1:
            multiplierUp = multiplierUp + 1
        if x == defendingPokemonType2:
            multiplierUp = multiplierUp + 1
    
    multiplierDown = 1
    for y in attackerTypeVDefenderTypeXHALF.get(moveType):
        if y == defendingPokemonType1:
            multiplierDown = multiplierDown/2
        if y == defendingPokemonType2:
            multiplierDown = multiplierDown/2
    
    type = 2**(multiplierUp * multiplierDown)

    if moveType in attackerTypeVDefenderTypeX0:
        for z in attackerTypeVDefenderTypeX0.get(moveType):
            if z == defendingPokemonType1 or z == defendingPokemonType2:
                type = 0

    type = math.floor(type)

    #Damage Calculation if it's a physical move
    if type == 'Physical':
        ((((((2*50)/5)+2)*power*(a/d))/50)+2)*critical*random*stab*type
def userFirst():
    pass
def rivalFirst():
    pass

#Needed variables and objects before the code starts__________________________________________________________________________________________________________________________________
pokemonList = ('Blaziken', 'Victreebel', 'Hawlucha', 'Bisharp', 'Tapukoko', 'Tyrantrum', 'Claydol', 'Ursaring', 'Lucario', 'Nidoking', 'Hoopa', 'Metapod', 'Mismagius'
               'Aggron', 'Gyarados', 'Froslass', 'Dragonite', 'Iron Valiant')

Blaziken = []
Blaziken.append(Pokemon('Blaziken', 'Fire', 'Fighting'))
Blaziken.append(stats(317, 296, 196, 276, 196, 216))
Blaziken.append(MoveInfo('Double Kick', 'Fighting', 'Physical', 30, 100))
Blaziken.append(MoveInfo('Brave Bird', 'Flying', 'Physical', 120, 100))
Blaziken.append(MoveInfo('Fire Blast', ' Fire', 'Special', 110, 85))
Blaziken.append(MoveInfo('Slash', 'Normal', 'Physical', 70, 100))
Victreebel = []
Victreebel.append(Pokemon('Victreebel', 'Grass', 'Poison'))
Victreebel.append(stats(317, 266, 186, 256, 196, 196))
Victreebel.append(MoveInfo('Leaf Storm', 'Grass', 'Special', 130, 90))
Victreebel.append(MoveInfo('Sludge Wave', 'Poison', 'Special', 95, 100))
Victreebel.append(MoveInfo('Solar Beam', 'Grass', 'Special', 120, 100))
Victreebel.append(MoveInfo('Theif', 'Dark', 'Physical', 60, 100))
Hawlucha = []
Hawlucha.append(Pokemon('Hawlucha', 'Fighting', 'Flying'))
Hawlucha.append(stats(313, 240.5, 206, 204, 182, 292))
Hawlucha.append(MoveInfo('Flying Press', 'Fighting', 'Physical', 100, 95))
Hawlucha.append(MoveInfo('Sky Attack', 'FLying', 'Physical', 140, 90))
Hawlucha.append(MoveInfo('Stone Edge', 'Rock', 'Physical', 100, 80))
Hawlucha.append(MoveInfo('Throat Chop', 'Dark', 'Physical', 80, 100))
Kingambit = []
Kingambit.append(Pokemon('Kingambit', 'Dark', 'Steel'))
Kingambit.append(stats(357, 326, 296, 176, 226, 156))
Kingambit.append(MoveInfo('Iron Head', 'Steel', 'Physical', 80, 100))
Kingambit.append(MoveInfo('Night Slash', 'Dark', 'Physical', 70, 100))
Kingambit.append(MoveInfo('Steel Beam', 'Steel', 'Special', 140, 95))
Kingambit.append(MoveInfo('Stone Edge', 'Rock', 'Physical', 100, 80))
Tapu_Koko = []
Tapu_Koko.append(Pokemon('Tapu_Koko', 'Electric', 'Fairy'))
Tapu_Koko.append(stats(297, 286, 226, 246, 206, 316))
Tapu_Koko.append(MoveInfo('Wild Charge', 'Electric', 'Physical', 90, 100))
Tapu_Koko.append(MoveInfo('Hyper Beam', 'Normal', 'Special', 150, 90))
Tapu_Koko.append(MoveInfo('Brave Bird', 'Flying', 'Physical', 90, 100))
Tapu_Koko.append(MoveInfo("Nature's Madness", 'Fairy', 'Special', '-', 90))
Tyrantrum = []
Tyrantrum.append(Pokemon('Tyrantrum', 'Rock', 'Dragon'))
Tyrantrum.append(stats(321, 298.5, 294, 194, 174, 198.5))
Tyrantrum.append(MoveInfo('Head Smash', 'Rock', 'Physical', 150, 80))
Tyrantrum.append(MoveInfo('Earthquake', 'Ground', 'Physical', 100, 100))
Tyrantrum.append(MoveInfo('Dragon Claw', 'Dragon', 'Physical', 80, 100))
Tyrantrum.append(MoveInfo('Ice Fang', 'Ice', 'Physical', 65, 95))
Claydol = []
Claydol.append(Pokemon('Claydol', 'Ground', 'Psychic'))
Claydol.append(stats(277, 196, 266, 196, 296, 206))
Claydol.append(MoveInfo('Explosion', 'Nomal', 'Plysical', 250, 100))
Claydol.append(MoveInfo('Earth Power', 'Ground', 'Special', 90, 100))
Claydol.append(MoveInfo('Psychic', 'Psychic', 'Special', 90, 100))
Claydol.append(MoveInfo('Ice Beam', 'Ice', 'Special', 90, 100))
Ursaring = []
Ursaring.append(Pokemon('Ursaring', 'Normal', 'NA'))
Ursaring.append(stats(337, 316, 206, 206, 206, 166))
Ursaring.append(MoveInfo('Hammer Arm', 'Fighting', 'Physical', 100, 90))
Ursaring.append(MoveInfo('Thrash', 'Normal', 'Physical', 120, 100))
Ursaring.append(MoveInfo('High Horsepwoer', 'Ground', 'Phsyical', 95, 95))
Ursaring.append(MoveInfo('Play Rough', 'Fairy', 'Physical', 90, 90))
Lucario = []
Lucario.append(Pokemon('Lucario', 'Fighting', 'Steel'))
Lucario.append((297, 276, 196, 286, 196, 236))
Lucario.append(('Meteor Smash', 'Steel', 'Physical', 90, 90))
Lucario.append(('Dragon Pulse', 'Dragon', 'Special', 85, 100))
Lucario.append(('Extreme Speed', 'Noraml', 'Physical', 80, 100))
Lucario.append(('Aura Sphere', 'Fighting', 'Special', 80, 100))
Nidoking = []
Nidoking.append(Pokemon('Nidoking', 'Ground', 'Poison'))
Nidoking.append(stats(319, 260.5, 210.5, 226, 206, 226))
Nidoking.append(MoveInfo('Surf', 'Water', 'Special', 90, 100))
Nidoking.append(MoveInfo('Poison Jab', 'Poison', 'Phsyical', 80, 100))
Nidoking.append(MoveInfo('Stone Edge', 'Rock', 'Physical', 100, 80))
Nidoking.append(MoveInfo('Thunderbolt', 'Electric', 'Special', 90, 100))
Hoopa = []
Hoopa.append(Pokemon('Hoopa', 'Psychic', 'Ghost'))
Hoopa.append(stats(317, 276, 176, 356, 316, 196))
Hoopa.append(MoveInfo('Shadow Ball', 'Ghost', 'Special', 80, 100))
Hoopa.append(MoveInfo('Hyperspace Hole', 'Psychic', 'Special', 80, 100))
Hoopa.append(MoveInfo('Psychic', 'Psychic', 'Special', 90, 100))
Hoopa.append(MoveInfo('Focus Blast', 'Fighting', 'Physical', 120, 70))
Metapod = []
Metapod.append(Pokemon('Metapod', 'Bug', 'NA'))
Metapod.append(stats(304, 202, 229, 213, 213, 224))
Metapod.append(MoveInfo('Thunderbolt', 'Electric', 'Special', 90, 100))
Metapod.append(MoveInfo('Surf', 'Water', 'Special', 90, 100))
Metapod.append(MoveInfo('Hyper Beam', 'Normal', 'Special', 150, 90))
Metapod.append(MoveInfo('Harden', 'Normal', 'Special', 0, 100))
Mismagius = []
Mismagius.append(Pokemon('Mismagius', 'Ghost', 'NA'))
Mismagius.append(stats(277, 176, 176, 266, 266, 266))
Mismagius.append(MoveInfo('Phantom Force', 'Ghost', 'Physical', 90, 100))
Mismagius.append(MoveInfo('Power Gem', 'Rock', 'Special', 80, 100))
Mismagius.append(MoveInfo('Dazzling Gleam', 'Fairy', 'Special', 80, 100))
Mismagius.append(MoveInfo('Poltergeist', 'Ghost', 'Physical', 110, 90))
Aggron = []
Aggron.append(Pokemon('Aggron', 'Rock', 'Steel'))
Aggron.append(stats(297, 271, 416, 176, 176, 156))
Aggron.append(MoveInfo('Head Smash', 'Rock', 'Physical', 150, 80))
Aggron.append(MoveInfo('Rock Slide', 'Rock', 'Physical', 75, 90))
Aggron.append(MoveInfo('Iron Tail', 'Steel', 'Physical', 100, 75))
Aggron.append(MoveInfo('Thunderbolt', 'Electirc', 'Special', 90, 100))
Gyarados = []
Gyarados.append(Pokemon('Gyarados', 'Water', 'Flying'))
Gyarados.append(stats(347, 306, 214, 176, 256, 218.5))
Gyarados.append(MoveInfo('Thrash', 'Normal', 'Physical', 120, 100))
Gyarados.append(MoveInfo('Hurricane', 'FLying', 'Special', 110, 70))
Gyarados.append(MoveInfo('Hydro Pump', 'Water', 'Special', 110, 80))
Gyarados.append(MoveInfo('Earthquake', 'Ground', 'Special', 100, 100))
Froslass = []
Froslass.append(Pokemon('Froslass', 'Ice', 'Ghost'))
Froslass.append(stats(297, 216, 196, 216, 196, 276))
Froslass.append(MoveInfo('Blizzard', 'Ice', 'Special', 110, 70))
Froslass.append(MoveInfo('Shadow Ball', 'Ghost', 'Special', 80, 100))
Froslass.append(MoveInfo('Poltergeist', 'Ghost', 'Physicla', 110, 90))
Froslass.append(MoveInfo('Ice Spinner', 'Ice', 'Physical', 80, 100))
Dragonite = []
Dragonite.append(Pokemon('Dragonite', 'Dragon', 'Flying'))
Dragonite.append(stats(339, 324, 246, 256, 256, 216))
Dragonite.append(MoveInfo('Outrage', 'Dragon', 'Physical', 120, 100))
Dragonite.append(MoveInfo('Dragon Rush', 'Dragon', 'Physical', 100, 75))
Dragonite.append(MoveInfo('Hurricane', 'Flying', 'Special', 110, 70))
Dragonite.append(MoveInfo('Fire Blast', 'Fire', 'Physical', 110, 85))
Iron_Valiant = []
Iron_Valiant.append(Pokemon('Iron Valiant', 'Fairy', 'Fighting'))
Iron_Valiant.append(stats(305, 316, 236, 296, 176, 288.5))
Iron_Valiant.append(MoveInfo('Spirit Break', 'Fairy', 'Physical', 75, 100))
Iron_Valiant.append(MoveInfo('Moon Blast', 'Fairy', 'Special', 95, 100))
Iron_Valiant.append(MoveInfo('Close Combat', 'Fighting', 'Physical', 120, 100))
Iron_Valiant.append(MoveInfo('Leaf Blade', 'Grass', 'Physical', 90, 100))

#Put all the afore stated Pokemon into a single list for easier access
pokemonStats = []
pokemonStats.append(Blaziken)
pokemonStats.append(Victreebel)
pokemonStats.append(Hawlucha)
pokemonStats.append(Kingambit)
pokemonStats.append(Tapu_Koko)
pokemonStats.append(Tyrantrum)
pokemonStats.append(Claydol)
pokemonStats.append(Ursaring)
pokemonStats.append(Lucario)
pokemonStats.append(Nidoking)
pokemonStats.append(Hoopa)
pokemonStats.append(Metapod)
pokemonStats.append(Mismagius)
pokemonStats.append(Aggron)
pokemonStats.append(Gyarados)
pokemonStats.append(Froslass)
pokemonStats.append(Dragonite)
pokemonStats.append(Iron_Valiant)

#Main Code____________________________________________________________________________________________________________________________________________________________________________

print('What is your name?')
name = input()
name = nameChecker(name)

#Start the interaction
statement = f'RIVAL: Why hello {name}! Lets battle!'
print(statement)

#Will they battle (run the application)\
statement = f'RIVAL: Wait, {name}, do you even want to battle? Y/N'
print(statement)
answer = input()
inputChecker(answer)

#What the NPC says if they say no
if answer == 'N':
    print("RIVAL: Didn't realize I ran into a scardy cat. {name}, how can you call yourself a trainer?!\n CREATOR OF THE GAME: Thanks for playing. I hope you play again!")
    exit()

#Start getting their pokemon
print("So, what Pokemon would you like to use to lose?")

    #List the Pokemon you can choose from
pokemonListandTypes = '''1) Blaziken: Fire Fighting
2) Victreebel: Grass Poison
3) Hawlucha: Flying Fighting
4) Kingambit: Dark Steel
5) Tapukoko: Electric Fairy
6) Tyrantrum: Rock Dragon
7) Claydol: Ground Psychic
8) Ursaring: Normal
9) Lucario: Fighting Steel
10) Nidoking: Poison Ground
11) Hoopa: Psychic Ghost
12) Metapod: Bug
13) Mismagius: Ghost
14) Aggron: Steel Rock
15) Gyarados: Water Flying
16) Froslass: Ice Ghost
17) Dragonite: Dragon Flying
18) Iron Valiant: Fairy Fighting'''
print(pokemonListandTypes)

    #Player picks their Pokemon
userPokemon1, userPokemon2, userPokemon3 = pokemonChooser()
if userPokemon1 > 18 or userPokemon2 > 18 or userPokemon3 > 18:
    userPokemon1, userPokemon2, userPokemon3 = pokemonRecount()
statement = f'Did you choose {pokemonList[userPokemon1 - 1]}, {pokemonList[userPokemon2 - 1]}, and {pokemonList[userPokemon3 - 1]}? Y/N'
print(statement)
answer = input().upper()

    # Player can repick Pokemon if necessary
if answer != 'Y':
    userPokemon1, userPokemon2, userPokemon3 = pokemonChecker(answer, pokemonListandTypes, pokemonList)

#Set User's Pokemon stats
userPokemon1Stats = pokemonStats[userPokemon1-1]
userPokemon2Stats = pokemonStats[userPokemon2-1]
userPokemon3Stats = pokemonStats[userPokemon3-1]

#Rival picks their Pokemon
print('RIVAL: Well then, let me pick my Pokemon to beat you. Should be easy enough ;D')

    # Random Pokemon selected, given their own variables, and listed.
rivalsPokemon = random.sample(range(0, 17), 3)

rivalPokemon1, rivalPokemon2, rivalPokemon3 = rivalsPokemon

#Set Rival's Pokemon stats
rivalPokemon1Stats = pokemonStats[rivalPokemon1]
rivalPokemon2Stats = pokemonStats[rivalPokemon2]
rivalPokemon3Stats = pokemonStats[rivalPokemon3]

#State rival's Pokemon
statement = f'My Pokemon will be {pokemonList[rivalPokemon1]}, {pokemonList[rivalPokemon2]}, and {pokemonList[rivalPokemon3]}. Should be an easy win!'
print(statement)

#Announcer states the rules
statement = f"""ANNOUNCER: {name} sends out {userPokemon1Stats[0].name}, and his rival send out {rivalPokemon1Stats[0].name}! What an exciting matchup!
ANNOUNCER: As a reminder of the rules:
1) The Pokemon with the higher speed will go first.
2) After each round of combat, the difference between the two Pokemon's speed will be calculated and added to itself. If the difference ever passes that of the 
    slower Pokemon's speed, the faster Pokemon will get to attack twice before the slower Pokemon will have it's turn.
3) Type advantages and disadvantages are applied to both types if applicable. E.g. A Water move against a Ground/Rock Pokemon is 4x effective
4) You cannot switch out Pokemon mid fight. Once a Pokemon is chosen, it will fight until it is fainted
5) There are no healing items allowed

Now that the rules are out of the way, LETS BEGIN!!!"""
print(statement)

#Determine who goes first
if userPokemon1Stats[1].speed > rivalPokemon1Stats[1].speed:
    userFirst()
if userPokemon1Stats[1].speed < rivalPokemon1Stats[1].speed:
    rivalFirst()
