#Function definitions, dictionaries, classes, and imports________________________________________________________________________________________________________________________

import random
import math

attackerTypeVDefenderTypeXDOUBLE = {
    'Fire' : ['Grass', 'Ice', 'Bug', 'Steel'],
    'Water' : ['Fire', 'Ground', 'Rock'],
    'Electric' : ['Water', 'Flying'],
    'Grass' : ['Water', 'Ground', 'Rock'],
    'Ice' : ['Grass', 'Ground', 'Flying', 'Dragon'],\
    'Fighting' : ['Normal', 'Ice', 'Rock', 'Dark', 'Steel'],
    'Poison' : ['Grass', 'Fairy'],
    'Ground' : ['Fire', 'Electric', 'Poison', 'Rock', 'Steel'],
    'Flying' : ['Grass', 'Fighting', 'Bug'],
    'Psychic' : ['Fighting', 'Poison'],
    'Bug' : ['Grass', 'Psychic', 'Dark'],
    'Rock' : ['Fire', 'Ice', 'Flying', 'Bug'],
    'Ghost' : ['Psychic', 'Ghost'],
    'Dragon' : ['Dragon'],
    'Dark' : ['Psychic', 'Ghost'],
    'Steel' : ['Ice', 'Rock', 'Fairy'],
    'Fairy' : ['Fighting', 'Dragon', 'Dark'],
    'Normal' : []
}
attackerTypeVDefenderTypeXHALF = {
    'Normal' : ['Rock', 'Steel'],
    'Fire' : ['Fire', 'Water', 'Rock', 'Dragon'],
    'Water' : ['Water', 'Grass', 'Dragon'],
    'Electric' : ['Electric', 'Grass', 'Dragon'],
    'Grass' : ['Fire', 'Grass', 'Poison', 'Flying', 'Bug', 'Dragon', 'Steel'],
    'Ice' : ['Fire', 'Water', 'Ice', 'Steel'],
    'Fighting' : ['Poison', 'Flying', 'Psychic', 'Bug', 'Fairy'],
    'Poison' : ['Poison', 'Ground', 'Rock', 'Ghost'],
    'Ground' : ['Grass', 'Rock'],
    'Flying' : ['Electric', 'Rock', 'Steel'],
    'Psychic' : ['Psychic', 'Steel'],
    'Bug' : ['Fire', 'Fighting', 'Poison', 'Flying', 'Ghost', 'Steel', 'Fairy'],
    'Rock' : ['Fighting', 'Ground', 'Steel'],
    'Ghost' : ['Dark'],
    'Dragon' : ['Steel'],
    'Dark' : ['Dark', 'Fairy'],
    'Steel' : ['Fire', 'Water', 'Electric', 'Steel'],
    'Fairy' : ['Fire', 'Poison', 'Steel']
}
attackerTypeVDefenderTypeX0 = {
    'Normal' : ['Ghost'],
    'Electric' : ['Ground'],
    'Fighting' : ['Ghost'],
    'Poison' : ['Steel'],
    'Ground' : ['Flying'],
    'Psychic' : ['Dark'],
    'Ghost' : ['Normal'],
    'Dragon' : ['Fairy'],
    'Fire' : [],
    'Water' : [],
    'Grass' : [],
    'Ice' : [],
    'Flying' : [],
    'Bug' : [],
    'Rock' : [],
    'Dark' : [],
    'Steel' : [],
    'Fairy' : []
}

class Pokemon:
    def __init__(self, name, type1, type2):
        self.name = name
        self.type1 = type1
        self.type2 = type2
class stats:
    def __init__(self, HP, attack, defense, sp_attack, sp_defense, speed):
        self.HP = HP
        self.attack = attack
        self.defense = defense
        self.sp_attack = sp_attack
        self.sp_defense = sp_defense
        self.speed = speed
class MoveInfo:
    def __init__(self, name, moveType, classification, power, accuracy):
        self.name = name
        self.moveType = moveType
        self.classification = classification
        self.power = power
        self.accuracy = accuracy

def nameChecker(name):

        #Check if they spelled their name right
    statement = f'\n{name}, thats your name right? Y/N\n'
    print(statement)
    answer = input()
    answer = answer.upper()

        #Make sure that they gave an acceptable answer
    while answer != 'Y' and answer != 'N':
        statement = f"\nBro, that's not even an answer, how about we try that again.\n\n{name}, that's how you spell it right? Y/N\n"
        print(statement)
        answer = input()
        answer = answer.upper()

        #If they haven't actually spelled it right, ask them to spell it right
    if answer != 'Y':
        print("\nBruh, you're the one that spelled it. Spell it right this time!\n\n")
        name = input()
        name = nameChecker(name)
    return name
def inputChecker(answer):
    answer = answer.upper()

        #Make sure they have the right kind of input, specifically for yes or no answers
    if answer != 'Y' and answer != 'N':
        print("Whoops, that's not a recognized input, lets try that again")
        answer = input()
        answer = inputChecker(answer)
    return answer
def pokemonChooser():
        #Create variable that evaluates if the type of input, number between 1 and 18, is valid
    checker = False

        #Choice 1
    choice1 = input()

        #Keep running until checker has been flipped
    while checker == False:

            #What to do if the input isn't a numerical value
        if not choice1.isdigit():
            statement = f'Whoops, your first choice needs to be a number! Lets try that again :D'
            print(statement)
            choice1 = input()

            #What to do if the input isn't between 1 and 18
        else:
            choice1 = int(choice1)
            if choice1 in range(1,19):
                checker = True
            else:
                statement = f'Whoops, your first chocie needs to be a number between 1 and 18! Lets try that again :D'
                print(statement)
                choice1 = input()
    
        
        #Put checker back to false so we can evaluate the input
    checker = False
    
        #Choice 2
    choice2 = input()

        #Keep running until checker is flipped
    while checker == False:

            #What to do if the input isn't a numerical value
        if not choice2.isdigit():
            statement = f'Whoops, your second choice needs to be a number! Lets try that again :D'
            print(statement)
            choice2 = input()
            
            #What to do if the input isn't between 1 and 18
        else:
            choice2 = int(choice2)
            if choice2 in range(1,19):
                checker = True
            else:
                statement = f'Whoops, your second chocie needs to be a number between 1 and 18! Lets try that again :D'
                print(statement)
                choice2 = input()
    
        #PUt checker back to false so we can evaluate the input
    checker = False

        #Choice 3
    choice3 = input()

        #Run until checker is flipped
    while checker == False:

            #What to do if the input isn't a numerical value
        if not choice3.isdigit():
            statement = f'Whoops, your third choice needs to be a number! Lets try that again :D'
            print(statement)
            choice3 = input()

            #What to do if the input ins't between 1 and 18
        else:
            choice3 = int(choice3)
            if choice3 in range(1,19):
                checker = True

                #What to do if the input isn't between 1 and 18
            else:
                statement = f'Whoops, your third chocie needs to be a number between 1 and 18! Lets try that again :D'
                print(statement)
                choice3 = input()
    
        #Return the 3 values
    return choice1, choice2, choice3
def pokemonChecker(answer, pokemonListandTypes, pokemonList):
        #Make sure that the user has actually picked what they want
    answer = answer.upper()

        #If the user did not pick what they want, have them rechoose and see if they picked what they want
    while answer != 'Y':
        print("RIVAL: Well then pick what you want! You'll still lose, but quit waisting my time!\n")
        print(pokemonListandTypes)
        userPokemon1, userPokemon2, userPokemon3 = pokemonChooser()
        statement = f'Did you choose {pokemonList[userPokemon1 - 1]}, {pokemonList[userPokemon2 - 1]}, and {pokemonList[userPokemon3 - 1]}? Y/N'
        print(statement)
        answer = input().upper()
    return userPokemon1, userPokemon2, userPokemon3
def damageCalculation(attackingStats, defendingStats, moveNumber, foeHP):
    #This is generation 5 and onward damage calculations

    #Set level for all Pokemon
    level = 75

    #Determine the random factor that is between .85 and 1
    rand = random.randrange(85, 100)
    rand = rand/100

    #Determine if there is a crtical hit
    critNum = random.randrange(1, 16)
    if critNum == 14:
        critical = 1.5
    if critNum != 14:
        critical = 1
        
    #Determine the Same Type Attack Bonus (STAB)
    stab = 1
    if attackingStats[moveNumber].moveType == attackingStats[0].type1 or attackingStats[moveNumber].moveType == attackingStats[0].type2:
        stab = 1.5

    #Determine type effectiveness
    multiplierUp = 0
    for x in attackerTypeVDefenderTypeXDOUBLE[attackingStats[moveNumber].moveType]:
        if x == defendingStats[0].type1:
            multiplierUp = multiplierUp + 1
        if x == defendingStats[0].type2:
            multiplierUp = multiplierUp + 1
    
    multiplierDown = 1
    for y in attackerTypeVDefenderTypeXHALF[attackingStats[moveNumber].moveType]:
        if y == defendingStats[0].type1:
            multiplierDown = multiplierDown/2
        if y == defendingStats[0].type2:
            multiplierDown = multiplierDown/2
    
    type = 2**(multiplierUp * multiplierDown)

    if attackingStats[moveNumber].moveType in attackerTypeVDefenderTypeX0:
        for z in attackerTypeVDefenderTypeX0[attackingStats[moveNumber].moveType]:
            if z == defendingStats[0].type1 or z == defendingStats[0].type2:
                type = 0

        #Calculate damage if Tapu Koko uses Nature's Madness
    if attackingStats[moveNumber].name == "Nature's Madness":
        damage = math.floor(foeHP/2)
    
        #Calculate damage if not Nature's Madness
    if attackingStats[moveNumber].name != "Nature's Madness":

        #Calculate damage based on physical or special attacks
        if attackingStats[moveNumber].classification == 'Physical':
            damage = round(((((((2*level)/5)+2)*attackingStats[moveNumber].power*(attackingStats[1].attack/defendingStats[1].defense))/50)+2)*critical*rand*stab*type, 0)

        if attackingStats[moveNumber].classification == 'Special':
            damage = round(((((((2*level)/5)+2)*attackingStats[moveNumber].power*(attackingStats[1].sp_attack/defendingStats[1].sp_defense))/50)+2)*critical*rand*stab*type, 0)

        #State whether or not it was a critical hit
    if critical == 1.5:
        statement = f"{attackingStats[0].name}'s {attackingStats[moveNumber].name} was a critical hit!"
        print(statement)

    #Display damage
    statement = f"""{attackingStats[0].name} used {attackingStats[moveNumber].name}\n
    {defendingStats[0].name} took {damage} damage!\n"""
    print(statement)

        #Let the user know about an attack's effectiveness
    if multiplierUp > 0:
        print('It was super effective!\n')
    elif multiplierDown < 1:
        print('It was not very effective!\n')
    elif type == 0:
        print("The move had no effect at all\n")

    return damage
def rivalMoveChoice():
        #Select the rival's move
    number = random.randrange(2, 5)
    return number
def userFirst(userStats, rivalStats, name, currentUserHP, currentRivalHP):
    #Determine the speed differene
    speedDifference = userStats[1].speed - rivalStats[1].speed

    #Make variables for Pokemon's HP
    userHP = currentUserHP
    rivalHP = currentRivalHP

    #Check HP
    if userHP < 1:
        #Set the new Current HP for user Pokemon
        userHP = userStats[1].HP
    if rivalHP < 1:
        rivalHP = rivalStats[1].HP

    #Creates the loop that keeps battle going and will end the battle if someone hits 0 HP
    while userHP > 0 and rivalHP > 0:

        #Checks to see if the speed difference has doubled up the rival's speed
        if speedDifference > 2*rivalStats[1].speed:
            #Explain what is happening
            statement = f"""{name}'s {userStats[0].name} is so fast, it gets to go twice!!"""
            print(statement)

            checker = False

                #Make sure that the input for the move number is acceptable
            while checker == False:
                #Pick move
                statement = f"""What move would you like {userStats[0].name}, to use?\n
                1) {userStats[2].name}: which is a {userStats[2].moveType} move
                2) {userStats[3].name}: which is a {userStats[3].moveType} move
                3) {userStats[4].name}: which is a {userStats[4].moveType} move
                4) {userStats[5].name}: which is a {userStats[5].moveType} move\n
                """
                print(statement)
                userMoveNumber = input()

                #Dummy proof input
                if userMoveNumber.isdigit():
                    userMoveNumber = int(userMoveNumber)
                    if userMoveNumber in range(1, 5):
                        userMoveNumber = userMoveNumber + 1
                        checker = True
                    else:
                        print("Whoops, that's not in the range we want. Lets try that again :D")
                else:
                    print("Whoops, that's not an acceptable input. Lets try that one again :D")

            #Calculate rival damage taken
            rivalHP = rivalHP - round(damageCalculation(userStats, rivalStats, userMoveNumber, rivalHP), 0)
            speedDifference = speedDifference - 2*rivalStats[1].speed
        else:

                #Make sure that the input for the move number is acceptable
            checker = False
            while checker == False:
                #What move do we use first
                statement = f"""What move would you like {userStats[0].name}, to use?\n
                1) {userStats[2].name}: which is a {userStats[2].moveType} move
                2) {userStats[3].name}: which is a {userStats[3].moveType} move
                3) {userStats[4].name}: which is a {userStats[4].moveType} move
                4) {userStats[5].name}: which is a {userStats[5].moveType} move\n
                """
                print(statement)
                userMoveNumber = input()

                 #Dummy proof input
                if userMoveNumber.isdigit():
                    userMoveNumber = int(userMoveNumber)
                    if userMoveNumber in range(1, 5):
                        userMoveNumber = userMoveNumber + 1
                        checker = True
                    else:
                        print("Whoops, that's not in the range we want. Lets try that again :D")
                else:
                    print("Whoops, that's not an acceptable input. Lets try that one again :D")

            #Calculate rival damage taken
            rivalHP = rivalHP - round(damageCalculation(userStats, rivalStats, userMoveNumber, rivalHP), 0)

            #If loop that checks to see if the rival's Pokemon still has HP left
            if rivalHP > 0:
                
                #Rival selects move
                rivalMoveNumber = rivalMoveChoice()

                #Calcuulate user damage taken
                userHP = userHP - round(damageCalculation(rivalStats, userStats, rivalMoveNumber, userHP), 0)
                
                #Add to the speed difference
                speedDifference = speedDifference + userStats[1].speed - rivalStats[1].speed

                #State what everyone's health is
                statement = f"""{userStats[0].name} has {userHP}/{userStats[1].HP}\n{rivalStats[0].name} has {rivalHP}/{rivalStats[1].HP}\n\n"""
                print(statement)
    return userHP, rivalHP
def rivalFirst(userStats, rivalStats, currentUserHP, currentRivalHP):
    #Determine the speed differene
    speedDifference = userStats[1].speed - rivalStats[1].speed

    #Make variables for Pokemon's HP
    userHP = currentUserHP
    rivalHP = currentRivalHP
    checker = False

    #Check HP
    if userHP < 1:
        #Set the new Current HP for user Pokemon
        userHP = userStats[1].HP
    if rivalHP < 1:
        rivalHP = rivalStats[1].HP

    #Creates the loop that keeps battle going and will end the battle if someone hits 0 HP
    while userHP > 0 and rivalHP > 0:

        #Checks to see if the speed difference has doubled up the rival's speed
        if speedDifference > 2*userStats[1].speed:
            #Explain what is happening
            statement = f"""Your Rival's {rivalStats[0].name} is so fast, it gets to go twice!!"""
            print(statement)

            #Rival selects move
            rivalMoveNumber = rivalMoveChoice()

            #Calcuulate user damage taken
            userHP = userHP - round(damageCalculation(rivalStats, userStats, rivalMoveNumber, userHP), 0)
            speedDifference = speedDifference - 2*userStats[1].speed
        else:
            #Rival selects move
            rivalMoveNumber = rivalMoveChoice()

            #Calculate user damage taken
            userHP = userHP - round(damageCalculation(rivalStats, userStats, rivalMoveNumber, userHP), 0)

            #Add to the speed difference
            speedDifference = speedDifference + rivalStats[1].speed - userStats[1].speed

            if userHP > 0:
                    #Make sure that the input for the move number is acceptable
                checker = False
                while checker == False:
                    #Pick move
                    statement = f"""What move would you like {userStats[0].name}, to use?\n
                    1) {userStats[2].name}: which is a {userStats[2].moveType} move
                    2) {userStats[3].name}: which is a {userStats[3].moveType} move
                    3) {userStats[4].name}: which is a {userStats[4].moveType} move
                    4) {userStats[5].name}: which is a {userStats[5].moveType} move\n
                    """
                    print(statement)
                    userMoveNumber = input()

                    #Dummy proof input
                    if userMoveNumber.isdigit():
                        userMoveNumber = int(userMoveNumber)
                        if userMoveNumber in range(1, 5):
                            userMoveNumber = userMoveNumber + 1
                            checker = True
                        else:
                            print("Whoops, that's not in the range we want. Lets try that again :D")
                    else:
                        print("Whoops, that's not an acceptable input. Lets try that one again :D")

                #Calculate rival damage taken
                rivalHP = rivalHP - round(damageCalculation(userStats, rivalStats, userMoveNumber, rivalHP), 0)

                #State what everyone's health is
                statement = f"""{userStats[0].name} has {userHP}/{userStats[1].HP}\n{rivalStats[0].name} has {rivalHP}/{rivalStats[1].HP}\n\n"""
                print(statement)
    return userHP, rivalHP

#Needed variables and objects before the code starts__________________________________________________________________________________________________________________________________
pokemonList = ('Blaziken', 'Victreebel', 'Hawlucha', 'Kingambit', 'Tapukoko', 'Tyrantrum', 'Claydol', 'Ursaring', 'Lucario', 'Nidoking', 'Hoopa', 'Metapod', 'Mismagius', 'Aggron', 'Gyarados', 'Froslass', 'Dragonite', 'Iron Valiant')
#Varialbes for current user and rival's HP
currentUserHP = -1
currentRivalHP = -1
#Create counters for how many pokmeon are remaining for both players
userPokemonRemaining = 3
rivalPokemonRemaining = 3

Blaziken = []
Blaziken.append(Pokemon('Blaziken', 'Fire', 'Fighting'))
Blaziken.append(stats(317, 296, 196, 276, 196, 216))
Blaziken.append(MoveInfo('Double Kick', 'Fighting', 'Physical', 30, 100))
Blaziken.append(MoveInfo('Brave Bird', 'Flying', 'Physical', 120, 100))
Blaziken.append(MoveInfo('Fire Blast', 'Fire', 'Special', 110, 85))
Blaziken.append(MoveInfo('Slash', 'Normal', 'Physical', 70, 100))
Victreebel = []
Victreebel.append(Pokemon('Victreebel', 'Grass', 'Poison'))
Victreebel.append(stats(317, 266, 186, 256, 196, 196))
Victreebel.append(MoveInfo('Leaf Storm', 'Grass', 'Special', 130, 90))
Victreebel.append(MoveInfo('Sludge Wave', 'Poison', 'Special', 95, 100))
Victreebel.append(MoveInfo('Solar Beam', 'Grass', 'Special', 120, 100))
Victreebel.append(MoveInfo('Theif', 'Dark', 'Physical', 60, 100))
Hawlucha = []
Hawlucha.append(Pokemon('Hawlucha', 'Fighting', 'Flying'))
Hawlucha.append(stats(313, 240.5, 206, 204, 182, 292))
Hawlucha.append(MoveInfo('Flying Press', 'Fighting', 'Physical', 100, 95))
Hawlucha.append(MoveInfo('Sky Attack', 'Flying', 'Physical', 140, 90))
Hawlucha.append(MoveInfo('Stone Edge', 'Rock', 'Physical', 100, 80))
Hawlucha.append(MoveInfo('Throat Chop', 'Dark', 'Physical', 80, 100))
Kingambit = []
Kingambit.append(Pokemon('Kingambit', 'Dark', 'Steel'))
Kingambit.append(stats(357, 326, 296, 176, 226, 156))
Kingambit.append(MoveInfo('Iron Head', 'Steel', 'Physical', 80, 100))
Kingambit.append(MoveInfo('Night Slash', 'Dark', 'Physical', 70, 100))
Kingambit.append(MoveInfo('Steel Beam', 'Steel', 'Special', 140, 95))
Kingambit.append(MoveInfo('Stone Edge', 'Rock', 'Physical', 100, 80))
Tapu_Koko = []
Tapu_Koko.append(Pokemon('Tapu Koko', 'Electric', 'Fairy'))
Tapu_Koko.append(stats(297, 286, 226, 246, 206, 316))
Tapu_Koko.append(MoveInfo('Wild Charge', 'Electric', 'Physical', 90, 100))
Tapu_Koko.append(MoveInfo('Hyper Beam', 'Normal', 'Special', 150, 90))
Tapu_Koko.append(MoveInfo('Brave Bird', 'Flying', 'Physical', 90, 100))
Tapu_Koko.append(MoveInfo("Nature's Madness", 'Fairy', 'Special', '-', 90))
Tyrantrum = []
Tyrantrum.append(Pokemon('Tyrantrum', 'Rock', 'Dragon'))
Tyrantrum.append(stats(321, 298.5, 294, 194, 174, 198.5))
Tyrantrum.append(MoveInfo('Head Smash', 'Rock', 'Physical', 150, 80))
Tyrantrum.append(MoveInfo('Earthquake', 'Ground', 'Physical', 100, 100))
Tyrantrum.append(MoveInfo('Dragon Claw', 'Dragon', 'Physical', 80, 100))
Tyrantrum.append(MoveInfo('Ice Fang', 'Ice', 'Physical', 65, 95))
Claydol = []
Claydol.append(Pokemon('Claydol', 'Ground', 'Psychic'))
Claydol.append(stats(277, 196, 266, 196, 296, 206))
Claydol.append(MoveInfo('Explosion', 'Normal', 'Physical', 250, 100))
Claydol.append(MoveInfo('Earth Power', 'Ground', 'Special', 90, 100))
Claydol.append(MoveInfo('Psychic', 'Psychic', 'Special', 90, 100))
Claydol.append(MoveInfo('Ice Beam', 'Ice', 'Special', 90, 100))
Ursaring = []
Ursaring.append(Pokemon('Ursaring', 'Normal', 'NA'))
Ursaring.append(stats(337, 316, 206, 206, 206, 166))
Ursaring.append(MoveInfo('Hammer Arm', 'Fighting', 'Physical', 100, 90))
Ursaring.append(MoveInfo('Thrash', 'Normal', 'Physical', 120, 100))
Ursaring.append(MoveInfo('High Horsepwoer', 'Ground', 'Physical', 95, 95))
Ursaring.append(MoveInfo('Play Rough', 'Fairy', 'Physical', 90, 90))
Lucario = []
Lucario.append(Pokemon('Lucario', 'Fighting', 'Steel'))
Lucario.append(stats(297, 276, 196, 286, 196, 236))
Lucario.append(MoveInfo('Meteor Smash', 'Steel', 'Physical', 90, 90))
Lucario.append(MoveInfo('Dragon Pulse', 'Dragon', 'Special', 85, 100))
Lucario.append(MoveInfo('Extreme Speed', 'Normal', 'Physical', 80, 100))
Lucario.append(MoveInfo('Aura Sphere', 'Fighting', 'Special', 80, 100))
Nidoking = []
Nidoking.append(Pokemon('Nidoking', 'Ground', 'Poison'))
Nidoking.append(stats(319, 260.5, 210.5, 226, 206, 226))
Nidoking.append(MoveInfo('Surf', 'Water', 'Special', 90, 100))
Nidoking.append(MoveInfo('Poison Jab', 'Poison', 'Physical', 80, 100))
Nidoking.append(MoveInfo('Stone Edge', 'Rock', 'Physical', 100, 80))
Nidoking.append(MoveInfo('Thunderbolt', 'Electric', 'Special', 90, 100))
Hoopa = []
Hoopa.append(Pokemon('Hoopa', 'Psychic', 'Ghost'))
Hoopa.append(stats(317, 276, 176, 356, 316, 196))
Hoopa.append(MoveInfo('Shadow Ball', 'Ghost', 'Special', 80, 100))
Hoopa.append(MoveInfo('Hyperspace Hole', 'Psychic', 'Special', 80, 100))
Hoopa.append(MoveInfo('Psychic', 'Psychic', 'Special', 90, 100))
Hoopa.append(MoveInfo('Focus Blast', 'Fighting', 'Physical', 120, 70))
Metapod = []
Metapod.append(Pokemon('Metapod', 'Bug', 'NA'))
Metapod.append(stats(304, 202, 229, 213, 213, 224))
Metapod.append(MoveInfo('Thunderbolt', 'Electric', 'Special', 90, 100))
Metapod.append(MoveInfo('Surf', 'Water', 'Special', 90, 100))
Metapod.append(MoveInfo('Hyper Beam', 'Normal', 'Special', 150, 90))
Metapod.append(MoveInfo('Harden', 'Normal', 'Special', 0, 100))
Mismagius = []
Mismagius.append(Pokemon('Mismagius', 'Ghost', 'NA'))
Mismagius.append(stats(277, 176, 176, 266, 266, 266))
Mismagius.append(MoveInfo('Phantom Force', 'Ghost', 'Physical', 90, 100))
Mismagius.append(MoveInfo('Power Gem', 'Rock', 'Special', 80, 100))
Mismagius.append(MoveInfo('Dazzling Gleam', 'Fairy', 'Special', 80, 100))
Mismagius.append(MoveInfo('Poltergeist', 'Ghost', 'Physical', 110, 90))
Aggron = []
Aggron.append(Pokemon('Aggron', 'Rock', 'Steel'))
Aggron.append(stats(297, 271, 416, 176, 176, 156))
Aggron.append(MoveInfo('Head Smash', 'Rock', 'Physical', 150, 80))
Aggron.append(MoveInfo('Rock Slide', 'Rock', 'Physical', 75, 90))
Aggron.append(MoveInfo('Iron Tail', 'Steel', 'Physical', 100, 75))
Aggron.append(MoveInfo('Thunderbolt', 'Electric', 'Special', 90, 100))
Gyarados = []
Gyarados.append(Pokemon('Gyarados', 'Water', 'Flying'))
Gyarados.append(stats(347, 306, 214, 176, 256, 218.5))
Gyarados.append(MoveInfo('Thrash', 'Normal', 'Physical', 120, 100))
Gyarados.append(MoveInfo('Hurricane', 'Flying', 'Special', 110, 70))
Gyarados.append(MoveInfo('Hydro Pump', 'Water', 'Special', 110, 80))
Gyarados.append(MoveInfo('Earthquake', 'Ground', 'Special', 100, 100))
Froslass = []
Froslass.append(Pokemon('Froslass', 'Ice', 'Ghost'))
Froslass.append(stats(297, 216, 196, 216, 196, 276))
Froslass.append(MoveInfo('Blizzard', 'Ice', 'Special', 110, 70))
Froslass.append(MoveInfo('Shadow Ball', 'Ghost', 'Special', 80, 100))
Froslass.append(MoveInfo('Poltergeist', 'Ghost', 'Physical', 110, 90))
Froslass.append(MoveInfo('Ice Spinner', 'Ice', 'Physical', 80, 100))
Dragonite = []
Dragonite.append(Pokemon('Dragonite', 'Dragon', 'Flying'))
Dragonite.append(stats(339, 324, 246, 256, 256, 216))
Dragonite.append(MoveInfo('Outrage', 'Dragon', 'Physical', 120, 100))
Dragonite.append(MoveInfo('Dragon Rush', 'Dragon', 'Physical', 100, 75))
Dragonite.append(MoveInfo('Hurricane', 'Flying', 'Special', 110, 70))
Dragonite.append(MoveInfo('Fire Blast', 'Fire', 'Physical', 110, 85))
Iron_Valiant = []
Iron_Valiant.append(Pokemon('Iron Valiant', 'Fairy', 'Fighting'))
Iron_Valiant.append(stats(305, 316, 236, 296, 176, 288.5))
Iron_Valiant.append(MoveInfo('Spirit Break', 'Fairy', 'Physical', 75, 100))
Iron_Valiant.append(MoveInfo('Moon Blast', 'Fairy', 'Special', 95, 100))
Iron_Valiant.append(MoveInfo('Close Combat', 'Fighting', 'Physical', 120, 100))
Iron_Valiant.append(MoveInfo('Leaf Blade', 'Grass', 'Physical', 90, 100))

#Put all the afore stated Pokemon into a single list for easier access
pokemonStats = []
pokemonStats.append(Blaziken)
pokemonStats.append(Victreebel)
pokemonStats.append(Hawlucha)
pokemonStats.append(Kingambit)
pokemonStats.append(Tapu_Koko)
pokemonStats.append(Tyrantrum)
pokemonStats.append(Claydol)
pokemonStats.append(Ursaring)
pokemonStats.append(Lucario)
pokemonStats.append(Nidoking)
pokemonStats.append(Hoopa)
pokemonStats.append(Metapod)
pokemonStats.append(Mismagius)
pokemonStats.append(Aggron)
pokemonStats.append(Gyarados)
pokemonStats.append(Froslass)
pokemonStats.append(Dragonite)
pokemonStats.append(Iron_Valiant)

#Main Code____________________________________________________________________________________________________________________________________________________________________________

print('What is your name?\n')
name = input()
name = nameChecker(name)

#Start the interaction
statement = f'\nRIVAL: Why hello {name}! Lets battle!\n'
print(statement)

#Will they battle (run the application)\
statement = f'RIVAL: Wait, {name}, do you even want to battle? Y/N\n'
print(statement)
answer = input()
answer = answer.upper()
answer = inputChecker(answer)

#What the NPC says if they say no
if answer == 'N':
    statement = f"RIVAL: Didn't realize I ran into a scardy cat. {name}, how can you call yourself a trainer?!\nCREATOR OF THE GAME: Thanks for playing. I hope you play again!"
    print(statement)
    exit()

#Start getting their pokemon
print("\nSo, what Pokemon would you like to use to lose?")

    #List the Pokemon you can choose from
pokemonListandTypes = '''1) Blaziken: Fire Fighting
2) Victreebel: Grass Poison
3) Hawlucha: Flying Fighting
4) Kingambit: Dark Steel
5) Tapukoko: Electric Fairy
6) Tyrantrum: Rock Dragon
7) Claydol: Ground Psychic
8) Ursaring: Normal
9) Lucario: Fighting Steel
10) Nidoking: Poison Ground
11) Hoopa: Psychic Ghost
12) Metapod: Bug
13) Mismagius: Ghost
14) Aggron: Steel Rock
15) Gyarados: Water Flying
16) Froslass: Ice Ghost
17) Dragonite: Dragon Flying
18) Iron Valiant: Fairy Fighting\n'''
print(pokemonListandTypes)

    #Player picks their Pokemon
userPokemon1, userPokemon2, userPokemon3 = pokemonChooser()
statement = f'\nDid you choose {pokemonList[userPokemon1 - 1]}, {pokemonList[userPokemon2 - 1]}, and {pokemonList[userPokemon3 - 1]}? Y/N\n'
print(statement)
answer = input().upper()

    # Player can repick Pokemon if necessary
if answer != 'Y':
    userPokemon1, userPokemon2, userPokemon3 = pokemonChecker(answer, pokemonListandTypes, pokemonList)

#Set User's Pokemon stats
userPokemon1Stats = pokemonStats[userPokemon1-1]
userPokemon2Stats = pokemonStats[userPokemon2-1]
userPokemon3Stats = pokemonStats[userPokemon3-1]

#Place Pokemon into User's Team
userPokemonTeam = [userPokemon1Stats, userPokemon2Stats, userPokemon3Stats] 

#Rival picks their Pokemon
print('\nRIVAL: Well then, let me pick my Pokemon to beat you. Should be easy enough ;D')

    # Random Pokemon selected, given their own variables, and listed.
rivalPokemon1, rivalPokemon2, rivalPokemon3 = random.sample(range(0, 17), 3)

#Set Rival's Pokemon stats
rivalPokemon1Stats = pokemonStats[rivalPokemon1]
rivalPokemon2Stats = pokemonStats[rivalPokemon2]
rivalPokemon3Stats = pokemonStats[rivalPokemon3]

#Place Pokemon into Rival's Team
rivalPokemonTeam = [rivalPokemon1Stats, rivalPokemon2Stats, rivalPokemon3Stats]

#State rival's Pokemon
statement = f'RIVAL: My Pokemon will be {pokemonList[rivalPokemon1]}, {pokemonList[rivalPokemon2]}, and {pokemonList[rivalPokemon3]}. Should be an easy win!\n\n'
print(statement)

#Announcer states the rules
statement = f"""ANNOUNCER: {name} sends out {userPokemonTeam[0][0].name}, and his rival send out {rivalPokemonTeam[0][0].name}! What an exciting matchup!\n\n
ANNOUNCER: As a reminder of the rules:
1) The Pokemon with the higher speed will go first.
2) After each round of combat, the difference between the two Pokemon's speed will be calculated and added to itself. If the difference ever passes that of the 
    slower Pokemon's speed, the faster Pokemon will get to attack twice before the slower Pokemon will have it's turn.
3) Type advantages and disadvantages are applied to both types if applicable. E.g. A Water move against a Ground/Rock Pokemon is 4x effective
4) You cannot switch out Pokemon mid fight. Once a Pokemon is chosen, it will fight until it is fainted
5) There are no healing items allowed

Now that the rules are out of the way, LETS BEGIN!!!\n\n"""
print(statement)

userCurrentPokemon = userPokemonTeam[0]
rivalCurrentPokemon = rivalPokemonTeam[0]

while userPokemonRemaining > 0 and rivalPokemonRemaining > 0:
    #Determine who goes first
    if userCurrentPokemon[1].speed >= rivalCurrentPokemon[1].speed:
        #Enter round of combat
        currentUserHP, currentRivalHP = userFirst(userCurrentPokemon, rivalCurrentPokemon, name, currentUserHP, currentRivalHP)

        #If user lost, drop the amount of Pokemon remaining, select new pokemon to fight with
        if currentUserHP < 1:
            userPokemonRemaining = userPokemonRemaining - 1

            if userPokemonRemaining == 2:
                #Select your next pokemon
                statement = f"""ANNOUNCER: Whoa would you look at that! {name}'s pokemon has fainted! What Pokemon wil they send out next?\n\n
                Will you send out:\n
                1) {userPokemonTeam[1][0].name} or 
                2) {userPokemonTeam[2][0].name}?"""
                print(statement)

                #Take in user input and load up the next Pokemon's stats
                userNextUp = int(input())
                userCurrentPokemon = userPokemonTeam[userNextUp]

            #Depending on what pokemon you chose as #2 you auto pick your last one
            if userPokemonRemaining == 1:
                if userNextUp == 1:
                    statement = f"""ANNOUNCER: {name} is down to their last Pokemon! Lets see if they can turn the tide with {userPokemonTeam[2][0].name}"""
                    print(statement)
                    userCurrentPokemon = userPokemonTeam[2]
                if userNextUp == 2:
                    statement = f"""ANNOUNCER: {name} is down to their last Pokemon! Lets see if they can turn the tide with {userPokemonTeam[1][0].name}"""
                    print(statement)
                    userCurrentPokemon = userPokemonTeam[1]

        #If rival lost, drop the amount of Pokemon remaining, select new pokemon to fight with
        if currentRivalHP < 1:
            rivalPokemonRemaining = rivalPokemonRemaining - 1

            if rivalPokemonRemaining == 2:
                #Randomly select the rival's next pokemon
                rivalNextUp = random.sample(range(1, 2), 1)
                rivalNextUpInt = rivalNextUp[0]

                #Load rival pokemon's stats
                rivalCurrentPokemon = rivalPokemonTeam[rivalNextUpInt]

                #Dictate what Pokemon the rival is using
                statement = f"""ANNOUNCER: {name}'s rival's Pokemon fainted! What Pokemon will they send out next?\n
                RIVAL: Well that's an easy choice! Go {rivalPokemonTeam[rivalNextUpInt][0].name}!\n\n"""
                print(statement)
                
            #Depending on which pokemon was picked, autoselect the next one
            if rivalPokemonRemaining == 1:
                print(statement)
                if rivalNextUpInt == 1:
                    rivalCurrentPokemon = rivalPokemonTeam[2]
                    statement = f"""ANNOUNCER: {name}'s Rival is down to their last Pokemon! Lets see if they can turn the tide with {rivalPokemonTeam[2][0].name}"""
                    print(statement)
                if rivalNextUpInt == 2:
                    rivalCurrentPokemon = rivalPokemonTeam[1]
                    statement = f"""ANNOUNCER: {name}'s Rival is down to their last Pokemon! Lets see if they can turn the tide with {rivalPokemonTeam[1][0].name}"""
                    print(statement)

    if userCurrentPokemon[1].speed < rivalCurrentPokemon[1].speed:
        #Enter round of combat
        currentUserHP, currentRivalHP = rivalFirst(userCurrentPokemon, rivalCurrentPokemon, currentUserHP, currentRivalHP)

        #If user lost, drop the amount of Pokemon remaining, select new pokemon to fight with
        if currentUserHP < 1:
            userPokemonRemaining = userPokemonRemaining - 1

            if userPokemonRemaining == 2:
                #Select your next pokemon
                statement = f"""ANNOUNCER: Whoa would you look at that! {name}'s Pokemon has fainted! What Pokemon will they send out next?\n\n
                Will you send out:\n
                1) {userPokemonTeam[1][0].name} or 
                2) {userPokemonTeam[2][0].name}?"""
                print(statement)

                #Take in what Pokemon to use next and load up their stats
                userNextUp = int(input())
                userCurrentPokemon = userPokemonTeam[userNextUp]

            #Depending on what pokemon you chose as #2 you auto pick your last one
            if userPokemonRemaining == 1:
                if userNextUp == 1:
                    statement = f"""ANNOUNCER: {name} is down to their last Pokemon! Lets see if they can turn the tide with {userPokemonTeam[2][0].name}"""
                    print(statement)
                    userCurrentPokemon = userPokemonTeam[2]
                if userNextUp == 2:
                    statement = f"""ANNOUNCER: {name} is down to their last Pokemon! Lets see if they can turn the tide with {userPokemonTeam[1][0].name}"""
                    print(statement)
                    userCurrentPokemon = userPokemonTeam[1]

        #If rival lost, drop the amount of Pokemon remaining, select new pokemon to fight with
        if currentRivalHP < 1:
            rivalPokemonRemaining = rivalPokemonRemaining - 1

            if rivalPokemonRemaining == 2:
                #Randomly select the rival's next pokemon
                rivalNextUp = random.sample(range(1, 2), 1)
                rivalNextUpInt = rivalNextUp[0]

                #Load rival pokemon's stats
                rivalCurrentPokemon = rivalPokemonTeam[rivalNextUpInt]

                #Dictate what Pokemon the rival is using
                statement = f"""ANNOUNCER: {name}'s rival's Pokemon fainted! What Pokemon will they send out next?\n
                RIVAL: Well that's an easy choice! Go {rivalPokemonTeam[rivalNextUpInt][0].name}!\n\n"""
                print(statement)

            #Depending on which pokemon was picked, autoselect the next one
            if rivalPokemonRemaining == 1:
                if rivalNextUpInt == 1:
                    statement = f"""ANNOUNCER: {name}'s rival is down to their last Pokemon! Lets see if they can turn the tide with {rivalPokemonTeam[2][0].name}"""
                    print(statement)
                    rivalCurrentPokemon = rivalPokemonTeam[2]
                if rivalNextUpInt == 2:
                    statement = f"""ANNOUNCER: {name}'s rival is down to their last Pokemon! Lets see if they can turn the tide with {rivalPokemonTeam[1][0].name}"""
                    print(statement)
                    rivalCurrentPokemon = rivalPokemonTeam[1]

#Depending on who wins, provide a final message
if userPokemonRemaining == 0:
    statement = f"""ANNOUNCER: Oh my goodness! What a heated battle. But {name} is out of usable Pokemon! Their RIVAL is the winner!\n
RIVAL: Hah! I knew I would win! If you ever want to taste defeat, you know where to find me!"""
    print(statement)
if rivalPokemonRemaining == 0:
    statement = f"""ANNOUNCER: Oh my goodness! What a heated battle! But {name}'s rival is out of usable Pokemon! {name} is the winner!\n
RIVAL: WHAT?! How could this be? I'm going to train and then I want a rematch!"""
    print(statement)
